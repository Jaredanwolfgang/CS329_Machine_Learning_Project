Initialized distributed mode...
cfg:  {'task': 'detection', '_model': None, '_postprocessor': None, '_criterion': None, '_optimizer': None, '_lr_scheduler': None, '_lr_warmup_scheduler': None, '_train_dataloader': None, '_val_dataloader': None, '_labeled_dataloader': None, '_ema': None, '_scaler': None, '_train_dataset': None, '_val_dataset': None, '_collate_fn': None, '_evaluator': None, '_writer': None, 'num_workers': 0, 'batch_size': None, '_train_batch_size': None, '_val_batch_size': None, '_train_shuffle': None, '_val_shuffle': None, 'resume': None, 'tuning': './ckpts/rtdetrv2_r101vd_6x_coco_from_paddle.pth', 'epoches': 72, 'last_epoch': -1, 'use_amp': True, 'use_ema': True, 'ema_decay': 0.9999, 'ema_warmups': 2000, 'sync_bn': True, 'clip_max_norm': 0.1, 'find_unused_parameters': False, 'seed': 0, 'print_freq': 100, 'checkpoint_freq': 1, 'output_dir': './output/rtdetrv2_r101vd_6x_kitti', 'summary_dir': None, 'device': '', 'yaml_cfg': {'task': 'detection', 'evaluator': {'type': 'CocoEvaluator', 'iou_types': ['bbox']}, 'num_classes': 80, 'remap_mscoco_category': True, 'train_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': './dataset/kitti_coco/train2017/', 'ann_file': './dataset/kitti_coco/annotations/instances_train2017.json', 'return_masks': False, 'transforms': {'type': 'Compose', 'ops': [{'type': 'RandomPhotometricDistort', 'p': 0.5}, {'type': 'RandomZoomOut', 'fill': 0}, {'type': 'RandomIoUCrop', 'p': 0.8}, {'type': 'SanitizeBoundingBoxes', 'min_size': 1}, {'type': 'RandomHorizontalFlip'}, {'type': 'Resize', 'size': [640, 640]}, {'type': 'SanitizeBoundingBoxes', 'min_size': 1}, {'type': 'ConvertPILImage', 'dtype': 'float32', 'scale': True}, {'type': 'ConvertBoxes', 'fmt': 'cxcywh', 'normalize': True}], 'policy': {'name': 'stop_epoch', 'epoch': 71, 'ops': ['RandomPhotometricDistort', 'RandomZoomOut', 'RandomIoUCrop']}}}, 'shuffle': True, 'num_workers': 8, 'drop_last': True, 'collate_fn': {'type': 'BatchImageCollateFuncion', 'scales': [480, 512, 544, 576, 608, 640, 640, 640, 672, 704, 736, 768, 800], 'stop_epoch': 71}, 'total_batch_size': 32}, 'val_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': './dataset/kitti_coco/val2017/', 'ann_file': './dataset/kitti_coco/annotations/instances_val2017.json', 'return_masks': False, 'transforms': {'type': 'Compose', 'ops': [{'type': 'Resize', 'size': [640, 640]}, {'type': 'ConvertPILImage', 'dtype': 'float32', 'scale': True}]}}, 'shuffle': False, 'num_workers': 8, 'drop_last': False, 'collate_fn': {'type': 'BatchImageCollateFuncion'}, 'total_batch_size': 32}, 'labeled_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': './dataset/kitti_AL/train2017/', 'ann_file': './dataset/kitti_AL/annotations/instances_train2017.json', 'return_masks': False, 'transforms': {'type': 'Compose', 'ops': [{'type': 'RandomPhotometricDistort', 'p': 0.5}, {'type': 'RandomZoomOut', 'fill': 0}, {'type': 'RandomIoUCrop', 'p': 0.8}, {'type': 'SanitizeBoundingBoxes', 'min_size': 1}, {'type': 'RandomHorizontalFlip'}, {'type': 'Resize', 'size': [640, 640]}, {'type': 'SanitizeBoundingBoxes', 'min_size': 1}, {'type': 'ConvertPILImage', 'dtype': 'float32', 'scale': True}, {'type': 'ConvertBoxes', 'fmt': 'cxcywh', 'normalize': True}], 'policy': {'name': 'stop_epoch', 'epoch': 71, 'ops': ['RandomPhotometricDistort', 'RandomZoomOut', 'RandomIoUCrop']}}}, 'shuffle': True, 'num_workers': 8, 'drop_last': True, 'collate_fn': {'type': 'BatchImageCollateFuncion', 'scales': [480, 512, 544, 576, 608, 640, 640, 640, 672, 704, 736, 768, 800], 'stop_epoch': 71}, 'total_batch_size': 32}, 'print_freq': 100, 'output_dir': './output/rtdetrv2_r101vd_6x_kitti', 'checkpoint_freq': 1, 'sync_bn': True, 'find_unused_parameters': False, 'use_amp': True, 'scaler': {'type': 'GradScaler', 'enabled': True}, 'use_ema': True, 'ema': {'type': 'ModelEMA', 'decay': 0.9999, 'warmups': 2000}, 'epoches': 72, 'clip_max_norm': 0.1, 'optimizer': {'type': 'AdamW', 'params': [{'params': '^(?=.*backbone)(?!.*norm|bn).*$', 'lr': 1e-06}, {'params': '^(?=.*(?:encoder|decoder))(?=.*(?:norm|bn)).*$', 'weight_decay': 0.0}], 'lr': 0.0001, 'betas': [0.9, 0.999], 'weight_decay': 0.0001}, 'lr_scheduler': {'type': 'MultiStepLR', 'milestones': [1000], 'gamma': 0.1}, 'lr_warmup_scheduler': {'type': 'LinearWarmup', 'warmup_duration': 2000}, 'model': 'RTDETR', 'criterion': 'RTDETRCriterionv2', 'postprocessor': 'RTDETRPostProcessor', 'use_focal_loss': True, 'eval_spatial_size': [640, 640], 'RTDETR': {'backbone': 'PResNet', 'encoder': 'HybridEncoder', 'decoder': 'RTDETRTransformerv2'}, 'PResNet': {'depth': 101, 'variant': 'd', 'freeze_at': 0, 'return_idx': [1, 2, 3], 'num_stages': 4, 'freeze_norm': True, 'pretrained': True}, 'HybridEncoder': {'in_channels': [512, 1024, 2048], 'feat_strides': [8, 16, 32], 'hidden_dim': 384, 'use_encoder_idx': [2], 'num_encoder_layers': 1, 'nhead': 8, 'dim_feedforward': 2048, 'dropout': 0.0, 'enc_act': 'gelu', 'expansion': 1.0, 'depth_mult': 1, 'act': 'silu'}, 'RTDETRTransformerv2': {'feat_channels': [384, 384, 384], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'num_levels': 3, 'num_layers': 6, 'num_queries': 300, 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'eval_idx': -1, 'num_points': [4, 4, 4], 'cross_attn_method': 'default', 'query_select_method': 'default'}, 'RTDETRPostProcessor': {'num_top_queries': 300}, 'RTDETRCriterionv2': {'weight_dict': {'loss_vfl': 1, 'loss_bbox': 5, 'loss_giou': 2}, 'losses': ['vfl', 'boxes'], 'alpha': 0.75, 'gamma': 2.0, 'matcher': {'type': 'HungarianMatcher', 'weight_dict': {'cost_class': 2, 'cost_bbox': 5, 'cost_giou': 2}, 'alpha': 0.25, 'gamma': 2.0}}, '__include__': ['../dataset/kitti_detection.yml', '../runtime.yml', './include/dataloader.yml', './include/optimizer.yml', './include/rtdetrv2_r50vd.yml'], 'config': './configs/rtdetrv2/rtdetrv2_r101vd_6x_kitti.yml', 'tuning': './ckpts/rtdetrv2_r101vd_6x_coco_from_paddle.pth', 'seed': 0, 'test_only': False, 'print_method': 'builtin', 'print_rank': 0}}
Start training
Load PResNet101 state_dict
tuning checkpoint from ./ckpts/rtdetrv2_r101vd_6x_coco_from_paddle.pth
Initialized distributed mode...
Initialized distributed mode...
Initialized distributed mode...
Initialized distributed mode...
Initialized distributed mode...
Initialized distributed mode...
Initialized distributed mode...
Load model.state_dict, {'missed': [], 'unmatched': []}
Initial lr: [1e-06, 0.0001, 0.0001]
building train_dataloader with batch_size=4...
loading annotations into memory...
Done (t=0.23s)
creating index...
index created!
building val_dataloader with batch_size=4...
loading annotations into memory...
Done (t=0.01s)
creating index...
index created!
number of trainable parameters: 76527756
[AL] Cleaning Files
[AL] Pausing at epoch 0.
[AL] Reconstructing labeled dataset ...
[AL] Selecting data to label ...
[AL] Selected 1500 data from unlabeled dataset.
[AL] Labeling data ...
[AL][0] Reconstructing dataloader ...
building labeled_dataloader with batch_size=4...
loading annotations into memory...
Done (t=0.05s)
creating index...
index created!
[AL][0] Done!
DistributedDataParallel(
  (module): RTDETR(
    (backbone): PResNet(
      (conv1): Sequential(
        (conv1_1): ConvNormLayer(
          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(32, eps=1e-05)
          (act): ReLU(inplace=True)
        )
        (conv1_2): ConvNormLayer(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(32, eps=1e-05)
          (act): ReLU(inplace=True)
        )
        (conv1_3): ConvNormLayer(
          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(64, eps=1e-05)
          (act): ReLU(inplace=True)
        )
      )
      (res_layers): ModuleList(
        (0): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (short): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
            (1-2): 2 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (1): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(512, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-3): 3 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (2): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-22): 22 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (3): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-2): 2 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (decoder): RTDETRTransformerv2(
      (input_proj): ModuleList(
        (0-2): 3 x Sequential(
          (conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (decoder): TransformerDecoder(
        (layers): ModuleList(
          (0-5): 6 x TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (dropout1): Dropout(p=0.0, inplace=False)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (cross_attn): MSDeformableAttention(
              (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
              (attention_weights): Linear(in_features=256, out_features=96, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (dropout2): Dropout(p=0.0, inplace=False)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (linear1): Linear(in_features=256, out_features=1024, bias=True)
            (activation): ReLU(inplace=True)
            (dropout3): Dropout(p=0.0, inplace=False)
            (linear2): Linear(in_features=1024, out_features=256, bias=True)
            (dropout4): Dropout(p=0.0, inplace=False)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (denoising_class_embed): Embedding(81, 256, padding_idx=80)
      (query_pos_head): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=4, out_features=512, bias=True)
          (1): Linear(in_features=512, out_features=256, bias=True)
        )
        (act): ReLU(inplace=True)
      )
      (enc_output): Sequential(
        (proj): Linear(in_features=256, out_features=256, bias=True)
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (enc_score_head): Linear(in_features=256, out_features=80, bias=True)
      (enc_bbox_head): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=4, bias=True)
        )
        (act): ReLU(inplace=True)
      )
      (dec_score_head): ModuleList(
        (0-5): 6 x Linear(in_features=256, out_features=80, bias=True)
      )
      (dec_bbox_head): ModuleList(
        (0-5): 6 x MLP(
          (layers): ModuleList(
            (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
          (act): ReLU(inplace=True)
        )
      )
    )
    (encoder): HybridEncoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (conv): Conv2d(512, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): Sequential(
          (conv): Conv2d(1024, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (2): Sequential(
          (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (encoder): ModuleList(
        (0): TransformerEncoder(
          (layers): ModuleList(
            (0): TransformerEncoderLayer(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
              )
              (linear1): Linear(in_features=384, out_features=2048, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=2048, out_features=384, bias=True)
              (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (dropout1): Dropout(p=0.0, inplace=False)
              (dropout2): Dropout(p=0.0, inplace=False)
              (activation): GELU(approximate='none')
            )
          )
        )
      )
      (lateral_convs): ModuleList(
        (0-1): 2 x ConvNormLayer(
          (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU(inplace=True)
        )
      )
      (fpn_blocks): ModuleList(
        (0-1): 2 x CSPRepLayer(
          (conv1): ConvNormLayer(
            (conv): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (conv2): ConvNormLayer(
            (conv): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (bottlenecks): Sequential(
            (0): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (1): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (2): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
          )
          (conv3): Identity()
        )
      )
      (downsample_convs): ModuleList(
        (0-1): 2 x ConvNormLayer(
          (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU(inplace=True)
        )
      )
      (pan_blocks): ModuleList(
        (0-1): 2 x CSPRepLayer(
          (conv1): ConvNormLayer(
            (conv): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (conv2): ConvNormLayer(
            (conv): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (bottlenecks): Sequential(
            (0): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (1): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (2): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
          )
          (conv3): Identity()
        )
      )
    )
  )
)
{'pred_logits': tensor([[[-4.4844, -5.4023,  2.5957,  ..., -6.0977, -6.0469, -5.9531],
         [-4.4141, -5.5195, -0.0240,  ..., -5.9062, -6.0312, -6.0859],
         [-4.8828, -5.7031, -4.3125,  ..., -5.9141, -6.1328, -3.8945],
         ...,
         [-4.1523, -4.9102, -3.8828,  ..., -5.7422, -5.8672, -5.1406],
         [-3.1406, -5.3242, -4.2656,  ..., -6.2617, -6.0000, -5.9453],
         [-4.2852, -5.6445, -3.2695,  ..., -6.7422, -6.1797, -6.6953]],

        [[ 1.8027, -4.5703, -5.4766,  ..., -4.6094, -6.6133, -5.7773],
         [-0.2844, -5.1133, -4.1367,  ..., -4.5312, -5.7930, -5.2266],
         [-4.6133, -5.0664, -4.7109,  ..., -5.7344, -6.3438, -7.1133],
         ...,
         [-5.1133, -4.8984, -4.9570,  ..., -5.1992, -6.0312, -5.9219],
         [-5.3164, -5.7930, -5.2070,  ..., -5.5859, -6.4922, -5.7109],
         [-4.8906, -5.1523, -4.3086,  ..., -7.0000, -7.3008, -7.0898]],

        [[-4.4258, -4.9453,  2.5469,  ..., -5.9609, -6.1953, -5.6172],
         [-4.4922, -5.7617, -4.3047,  ..., -4.8047, -5.2422, -6.5430],
         [-5.0117, -5.6523, -4.5312,  ..., -5.0312, -5.1055, -6.6172],
         ...,
         [-6.8008, -6.8750, -7.2578,  ..., -7.4766, -7.1445, -6.5781],
         [-4.2031, -3.8398, -3.7246,  ..., -5.8242, -6.8789, -6.3047],
         [-2.5508, -5.8867, -4.8164,  ..., -5.6641, -6.1523, -6.6562]],

        [[ 2.2949, -5.1172, -5.5469,  ..., -4.9727, -6.4258, -5.9062],
         [ 1.8252, -5.3242, -5.4844,  ..., -4.5234, -6.5039, -5.7031],
         [ 1.1221, -3.6465, -4.5664,  ..., -4.9883, -6.4766, -5.9180],
         ...,
         [-3.2207, -2.3301, -4.5234,  ..., -5.7031, -6.4727, -7.0508],
         [-3.2305, -3.5254, -3.9629,  ..., -5.8555, -6.5391, -7.1875],
         [-1.5107, -4.5977, -4.5508,  ..., -5.3125, -5.3906, -5.6836]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<SelectBackward0>), 'pred_boxes': tensor([[[0.3540, 0.6080, 0.1106, 0.2040],
         [0.2541, 0.5093, 0.0166, 0.0204],
         [0.2692, 0.1609, 0.0455, 0.0218],
         ...,
         [0.0253, 0.4567, 0.0193, 0.0774],
         [0.3814, 0.4889, 0.0092, 0.0351],
         [0.1392, 0.4870, 0.0179, 0.0295]],

        [[0.1778, 0.3435, 0.0178, 0.1076],
         [0.5044, 0.4911, 1.0000, 0.9999],
         [0.1191, 0.4433, 0.0199, 0.0267],
         ...,
         [0.4202, 0.5231, 0.0762, 0.0477],
         [0.3016, 0.6453, 0.1322, 0.2598],
         [0.0341, 0.4101, 0.0683, 0.1033]],

        [[0.5625, 0.6474, 0.0533, 0.0805],
         [0.7103, 0.4974, 0.0070, 0.0219],
         [0.7121, 0.4972, 0.0086, 0.0223],
         ...,
         [0.0235, 0.1476, 0.0213, 0.0536],
         [0.5342, 0.6548, 0.0064, 0.0105],
         [0.7151, 0.9290, 0.4900, 0.1427]],

        [[0.2745, 0.5410, 0.0283, 0.2472],
         [0.2412, 0.5464, 0.0251, 0.2431],
         [0.6599, 0.4836, 0.0119, 0.0853],
         ...,
         [0.6558, 0.4958, 0.0115, 0.0488],
         [0.6107, 0.4833, 0.0146, 0.0453],
         [0.8977, 0.4704, 0.0212, 0.1479]]], device='cuda:0',
       grad_fn=<SelectBackward0>), 'aux_outputs': [{'pred_logits': tensor([[[ -3.6211,  -6.1328,   2.4805,  ...,  -7.9805,  -7.8516, -10.8125],
         [ -4.7852,  -6.1992,  -0.6450,  ...,  -8.2656,  -8.5781,  -8.8750],
         [ -5.3125,  -8.2031,  -5.7891,  ...,  -7.8672,  -6.8828,  -5.1602],
         ...,
         [ -3.8652,  -5.9375,  -3.5176,  ...,  -6.0312,  -6.4922,  -6.5938],
         [ -3.5176,  -5.7383,  -4.4961,  ...,  -6.7773,  -5.3125,  -5.6328],
         [ -4.5078,  -5.4336,  -3.2246,  ...,  -6.8320,  -5.7812,  -7.1836]],

        [[  1.2686,  -4.2227,  -4.7930,  ...,  -5.2266,  -6.5117,  -5.3633],
         [  1.0781,  -4.3047,  -4.3320,  ...,  -3.4297,  -5.6641,  -5.5508],
         [ -3.9102,  -4.5938,  -5.7227,  ...,  -5.7461,  -4.1445,  -6.9102],
         ...,
         [ -4.9258,  -5.7461,  -6.5273,  ...,  -6.6641,  -7.0820,  -7.4922],
         [ -5.9023,  -6.7422,  -6.3125,  ...,  -6.8555,  -7.0781,  -7.2305],
         [ -4.7773,  -4.0391,  -4.3633,  ...,  -7.4219,  -7.8125,  -8.1484]],

        [[ -3.5332,  -5.6797,   1.4902,  ...,  -6.3086,  -7.2227,  -7.0664],
         [ -2.7988,  -6.0547,  -4.2891,  ...,  -3.9102,  -5.7461,  -7.3281],
         [ -3.2559,  -6.0547,  -4.8867,  ...,  -3.8027,  -5.8711,  -7.7383],
         ...,
         [ -5.7969,  -7.9102,  -7.5508,  ...,  -8.2812,  -8.5078,  -7.1172],
         [ -3.4375,  -3.6543,  -3.1719,  ...,  -5.4453,  -5.8633,  -5.8320],
         [ -2.5977,  -5.3008,  -5.6680,  ...,  -5.4961,  -6.6719,  -6.5469]],

        [[  1.4775,  -6.1484,  -5.8672,  ...,  -6.0156,  -7.9727,  -7.2422],
         [  1.0117,  -5.6484,  -5.3281,  ...,  -4.8242,  -6.1914,  -6.0469],
         [ -0.8428,  -4.4844,  -5.2812,  ...,  -6.3281,  -7.1719,  -7.3555],
         ...,
         [ -3.9180,  -1.8496,  -3.9375,  ...,  -5.6133,  -5.5000,  -7.3984],
         [ -3.0566,  -2.9648,  -2.9336,  ...,  -5.9531,  -7.0430,  -8.8750],
         [ -2.6484,  -4.6836,  -4.8281,  ...,  -5.7422,  -6.6484,  -7.7891]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[0.3545, 0.6079, 0.1121, 0.2055],
         [0.2542, 0.5089, 0.0164, 0.0200],
         [0.2704, 0.1614, 0.0455, 0.0207],
         ...,
         [0.0274, 0.4607, 0.0196, 0.0763],
         [0.3801, 0.4839, 0.0095, 0.0314],
         [0.1403, 0.4856, 0.0204, 0.0434]],

        [[0.1781, 0.3400, 0.0172, 0.1094],
         [0.5014, 0.5082, 1.0000, 1.0000],
         [0.1188, 0.4431, 0.0209, 0.0269],
         ...,
         [0.4253, 0.5230, 0.0732, 0.0517],
         [0.3236, 0.5772, 0.1018, 0.1393],
         [0.0345, 0.4202, 0.0668, 0.0896]],

        [[0.5616, 0.6466, 0.0542, 0.0798],
         [0.7120, 0.4973, 0.0084, 0.0226],
         [0.7128, 0.4969, 0.0095, 0.0228],
         ...,
         [0.0207, 0.1629, 0.0228, 0.0272],
         [0.5348, 0.6540, 0.0086, 0.0124],
         [0.7089, 0.9267, 0.5240, 0.1548]],

        [[0.2748, 0.5416, 0.0290, 0.2502],
         [0.2401, 0.5462, 0.0275, 0.2465],
         [0.6599, 0.4833, 0.0125, 0.0846],
         ...,
         [0.6571, 0.4936, 0.0128, 0.0554],
         [0.6123, 0.4828, 0.0160, 0.0475],
         [0.8979, 0.4713, 0.0191, 0.1564]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-5.5039, -7.5430,  2.3555,  ..., -8.1719, -7.9492, -9.8594],
         [-3.8008, -6.0234,  0.4036,  ..., -6.6797, -7.8008, -7.9961],
         [-4.8594, -7.5391, -5.5430,  ..., -6.6641, -6.2227, -4.2070],
         ...,
         [-4.2891, -6.1680, -3.5254,  ..., -5.5547, -6.2695, -6.2617],
         [-3.0527, -5.5273, -4.4609,  ..., -5.4453, -5.7422, -5.5039],
         [-4.7734, -5.6328, -3.4727,  ..., -6.7617, -6.2227, -7.0039]],

        [[ 1.6143, -4.3750, -5.1758,  ..., -4.5234, -7.8008, -5.9609],
         [ 0.1249, -3.7422, -3.9121,  ..., -2.7422, -6.3398, -5.6836],
         [-4.5977, -5.4805, -5.9023,  ..., -5.5977, -5.0703, -7.3711],
         ...,
         [-4.0977, -5.0195, -5.5195,  ..., -5.2500, -5.5430, -6.6602],
         [-5.0312, -5.8750, -5.3242,  ..., -5.1641, -5.9609, -6.1719],
         [-4.9258, -4.7148, -4.8633,  ..., -7.7812, -8.4766, -8.1172]],

        [[-5.4453, -7.4531,  1.7861,  ..., -7.2500, -8.2500, -7.2500],
         [-4.8945, -6.9570, -5.0859,  ..., -4.6484, -6.5664, -7.3594],
         [-5.0078, -7.4102, -5.2383,  ..., -4.1406, -6.5938, -7.3555],
         ...,
         [-5.9844, -6.0234, -6.5586,  ..., -7.2734, -8.5469, -6.9609],
         [-3.7441, -3.2246, -3.2285,  ..., -5.5469, -5.4062, -5.9375],
         [-2.3730, -5.1758, -5.0586,  ..., -5.9336, -6.3789, -7.1953]],

        [[ 2.5273, -6.0312, -4.7695,  ..., -5.0742, -8.1719, -6.2031],
         [ 1.9033, -6.0000, -5.5352,  ..., -5.0352, -6.4297, -5.8906],
         [ 0.8647, -3.5156, -3.6641,  ..., -4.8164, -6.5820, -5.8828],
         ...,
         [-3.3809, -1.9365, -4.1875,  ..., -5.3281, -5.6172, -7.5977],
         [-2.4023, -2.8555, -2.4648,  ..., -4.9023, -6.2031, -6.7188],
         [-2.3066, -4.9961, -4.8281,  ..., -6.1367, -6.6875, -7.9102]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[0.3542, 0.6079, 0.1104, 0.2052],
         [0.2541, 0.5097, 0.0165, 0.0195],
         [0.2698, 0.1614, 0.0447, 0.0209],
         ...,
         [0.0255, 0.4577, 0.0172, 0.0786],
         [0.3803, 0.4868, 0.0093, 0.0293],
         [0.1410, 0.4879, 0.0166, 0.0331]],

        [[0.1776, 0.3417, 0.0173, 0.1108],
         [0.5053, 0.4923, 1.0000, 1.0000],
         [0.1190, 0.4432, 0.0201, 0.0272],
         ...,
         [0.4215, 0.5243, 0.0724, 0.0527],
         [0.3135, 0.5931, 0.1391, 0.1729],
         [0.0345, 0.4130, 0.0676, 0.0995]],

        [[0.5622, 0.6472, 0.0539, 0.0800],
         [0.7108, 0.4975, 0.0074, 0.0220],
         [0.7131, 0.4975, 0.0092, 0.0226],
         ...,
         [0.0186, 0.1544, 0.0209, 0.0291],
         [0.5348, 0.6541, 0.0077, 0.0121],
         [0.7171, 0.9260, 0.5104, 0.1376]],

        [[0.2745, 0.5404, 0.0282, 0.2488],
         [0.2416, 0.5459, 0.0259, 0.2447],
         [0.6599, 0.4838, 0.0120, 0.0851],
         ...,
         [0.6568, 0.4946, 0.0125, 0.0544],
         [0.6128, 0.4832, 0.0170, 0.0449],
         [0.8972, 0.4706, 0.0184, 0.1478]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-5.1328, -6.8516,  2.4727,  ..., -8.8438, -8.1406, -8.9766],
         [-4.8281, -6.6250,  0.3008,  ..., -7.4102, -7.8633, -7.0039],
         [-4.5820, -6.9922, -4.4688,  ..., -6.4883, -6.0508, -3.4805],
         ...,
         [-4.0781, -5.9727, -4.0977,  ..., -5.0430, -5.3359, -5.4180],
         [-3.6523, -5.2930, -4.5586,  ..., -6.0117, -5.7812, -5.8125],
         [-4.7344, -4.8633, -3.2168,  ..., -6.3047, -6.1719, -6.9453]],

        [[ 1.9072, -3.6348, -4.4375,  ..., -4.2617, -6.7500, -5.6328],
         [-0.3384, -4.4844, -3.5957,  ..., -4.0039, -6.1211, -5.4570],
         [-4.5000, -5.8984, -5.4727,  ..., -5.7383, -5.6406, -7.3086],
         ...,
         [-4.5039, -5.3047, -5.4102,  ..., -5.6641, -6.4062, -7.5469],
         [-5.4258, -5.8945, -5.3047,  ..., -6.1094, -6.8398, -6.4961],
         [-4.5820, -4.8242, -4.4023,  ..., -6.9570, -7.5898, -7.8906]],

        [[-4.5234, -6.6758,  2.1816,  ..., -7.2148, -7.8047, -6.1094],
         [-3.9531, -6.3438, -4.8750,  ..., -4.4453, -5.8438, -7.5859],
         [-4.4414, -6.3281, -4.8477,  ..., -4.3203, -5.0977, -7.6406],
         ...,
         [-6.7344, -6.6094, -6.4492,  ..., -7.3984, -7.7109, -7.1367],
         [-3.9023, -3.2969, -3.4785,  ..., -5.4492, -5.5977, -5.7109],
         [-2.5332, -5.6094, -4.8633,  ..., -5.6094, -5.9805, -7.2812]],

        [[ 2.4629, -6.0234, -5.1133,  ..., -6.0508, -6.8828, -6.0469],
         [ 1.7607, -6.3828, -5.5664,  ..., -5.5664, -6.9141, -5.9648],
         [ 1.1025, -3.8984, -3.5898,  ..., -5.0273, -6.4062, -5.7930],
         ...,
         [-3.0488, -2.1328, -4.2109,  ..., -5.3750, -5.4648, -7.3164],
         [-2.8359, -3.1113, -2.9668,  ..., -5.8125, -6.5742, -7.4688],
         [-1.6582, -4.3828, -4.3047,  ..., -5.9141, -6.1055, -7.2227]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[0.3540, 0.6079, 0.1104, 0.2047],
         [0.2541, 0.5088, 0.0165, 0.0205],
         [0.2694, 0.1610, 0.0450, 0.0210],
         ...,
         [0.0256, 0.4580, 0.0180, 0.0764],
         [0.3815, 0.4867, 0.0089, 0.0307],
         [0.1404, 0.4882, 0.0164, 0.0296]],

        [[0.1778, 0.3421, 0.0175, 0.1097],
         [0.5015, 0.4876, 1.0000, 0.9999],
         [0.1191, 0.4431, 0.0200, 0.0269],
         ...,
         [0.4175, 0.5233, 0.0783, 0.0537],
         [0.3077, 0.6202, 0.1222, 0.1979],
         [0.0318, 0.4119, 0.0649, 0.0974]],

        [[0.5621, 0.6471, 0.0536, 0.0800],
         [0.7105, 0.4975, 0.0072, 0.0221],
         [0.7127, 0.4973, 0.0088, 0.0225],
         ...,
         [0.0193, 0.1551, 0.0209, 0.0403],
         [0.5341, 0.6549, 0.0067, 0.0110],
         [0.7179, 0.9295, 0.5196, 0.1406]],

        [[0.2745, 0.5408, 0.0286, 0.2482],
         [0.2411, 0.5462, 0.0251, 0.2434],
         [0.6600, 0.4837, 0.0121, 0.0855],
         ...,
         [0.6564, 0.4947, 0.0123, 0.0542],
         [0.6111, 0.4828, 0.0154, 0.0454],
         [0.8978, 0.4707, 0.0180, 0.1482]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-4.4180, -6.1523,  2.6582,  ..., -7.5820, -7.8125, -8.0938],
         [-4.8398, -5.8945,  0.0966,  ..., -6.8398, -7.4570, -6.5430],
         [-4.7930, -6.8164, -5.0938,  ..., -7.2461, -5.1797, -4.3594],
         ...,
         [-4.1523, -5.5469, -4.3477,  ..., -5.8594, -5.3320, -5.6328],
         [-3.5859, -5.6875, -4.5312,  ..., -6.6953, -5.9922, -6.3203],
         [-4.5195, -5.4297, -3.1680,  ..., -6.6602, -5.8984, -6.6836]],

        [[ 1.6201, -4.3555, -4.8555,  ..., -4.4492, -6.7969, -5.7812],
         [-0.9165, -4.2148, -3.3086,  ..., -3.0430, -4.0312, -4.5234],
         [-4.4492, -5.0820, -5.0703,  ..., -4.7539, -5.3906, -6.9375],
         ...,
         [-4.5156, -5.2539, -5.3516,  ..., -5.5664, -6.5469, -6.8086],
         [-5.1914, -6.2383, -5.8008,  ..., -5.5078, -5.9609, -5.6602],
         [-4.7930, -5.3164, -4.4844,  ..., -6.6836, -6.9219, -7.2070]],

        [[-4.8047, -6.4453,  1.9980,  ..., -7.2422, -7.5117, -6.7891],
         [-4.4805, -5.9492, -4.7344,  ..., -4.9062, -6.0547, -7.3125],
         [-4.8555, -5.8711, -4.9648,  ..., -4.9102, -6.0547, -7.4258],
         ...,
         [-6.3516, -6.7500, -6.7227,  ..., -7.5586, -7.3555, -6.7383],
         [-3.7891, -3.6270, -3.5801,  ..., -5.3867, -6.0664, -6.0547],
         [-2.4414, -5.4062, -4.8516,  ..., -5.9180, -5.8750, -6.7344]],

        [[ 2.2480, -5.6992, -4.6289,  ..., -5.0938, -6.5195, -5.0977],
         [ 1.8145, -5.8398, -4.8359,  ..., -4.8398, -6.8516, -5.1641],
         [ 0.9873, -4.2383, -4.1875,  ..., -5.2070, -7.2695, -6.1328],
         ...,
         [-3.2285, -2.3105, -4.5352,  ..., -5.8516, -6.3359, -7.3867],
         [-2.7734, -3.2324, -3.6816,  ..., -5.5039, -6.9023, -7.5234],
         [-1.9551, -4.5039, -4.0234,  ..., -5.7344, -5.7188, -6.5664]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[0.3539, 0.6080, 0.1105, 0.2052],
         [0.2540, 0.5092, 0.0166, 0.0204],
         [0.2692, 0.1609, 0.0455, 0.0217],
         ...,
         [0.0252, 0.4576, 0.0188, 0.0771],
         [0.3814, 0.4884, 0.0091, 0.0342],
         [0.1392, 0.4880, 0.0179, 0.0303]],

        [[0.1778, 0.3434, 0.0178, 0.1086],
         [0.5007, 0.4906, 1.0000, 1.0000],
         [0.1191, 0.4433, 0.0199, 0.0267],
         ...,
         [0.4207, 0.5257, 0.0766, 0.0498],
         [0.3063, 0.6200, 0.1511, 0.2610],
         [0.0340, 0.4118, 0.0685, 0.1063]],

        [[0.5625, 0.6474, 0.0532, 0.0806],
         [0.7103, 0.4975, 0.0070, 0.0219],
         [0.7122, 0.4974, 0.0086, 0.0223],
         ...,
         [0.0236, 0.1574, 0.0214, 0.0505],
         [0.5342, 0.6548, 0.0065, 0.0107],
         [0.7139, 0.9292, 0.4836, 0.1429]],

        [[0.2745, 0.5411, 0.0283, 0.2475],
         [0.2410, 0.5468, 0.0249, 0.2435],
         [0.6599, 0.4837, 0.0119, 0.0856],
         ...,
         [0.6558, 0.4947, 0.0115, 0.0518],
         [0.6107, 0.4835, 0.0146, 0.0443],
         [0.8975, 0.4709, 0.0207, 0.1479]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-4.4023, -5.5781,  2.5625,  ..., -7.1680, -7.7266, -6.6484],
         [-4.5469, -6.3359, -0.1874,  ..., -6.3203, -7.3594, -6.1016],
         [-4.7461, -5.7461, -4.5352,  ..., -6.2773, -5.5195, -4.1484],
         ...,
         [-4.1094, -5.3125, -4.0430,  ..., -6.1484, -6.0273, -5.2500],
         [-3.3730, -5.2148, -4.1602,  ..., -5.9961, -5.7539, -5.8828],
         [-4.2070, -5.1953, -3.0840,  ..., -6.2383, -5.7852, -6.4375]],

        [[ 1.6865, -4.1836, -5.0117,  ..., -4.5508, -6.8359, -5.4375],
         [ 0.4041, -4.5312, -4.0430,  ..., -3.9629, -5.1016, -4.5430],
         [-4.2969, -4.4961, -4.8203,  ..., -5.1797, -6.1445, -7.1055],
         ...,
         [-4.4492, -5.0625, -4.5234,  ..., -4.9453, -5.7617, -6.3711],
         [-4.5781, -5.5977, -4.8008,  ..., -5.7266, -6.5742, -5.9844],
         [-4.7539, -4.9102, -4.1836,  ..., -6.9766, -7.4883, -7.4336]],

        [[-4.6016, -5.1523,  2.3066,  ..., -7.0742, -7.9766, -5.5820],
         [-3.8789, -5.6094, -3.8535,  ..., -5.3438, -6.1133, -7.1445],
         [-4.2305, -5.5625, -4.0039,  ..., -5.3320, -6.0391, -7.2109],
         ...,
         [-6.1094, -6.9844, -6.6914,  ..., -7.3945, -6.9922, -6.6055],
         [-4.0273, -3.7012, -4.1211,  ..., -5.7461, -7.6016, -5.6992],
         [-2.5293, -5.9570, -4.4609,  ..., -5.8516, -6.1680, -6.8438]],

        [[ 2.2207, -5.5508, -4.8398,  ..., -5.0234, -6.2461, -4.9766],
         [ 1.7715, -5.6445, -4.8555,  ..., -4.3750, -6.6953, -4.7227],
         [ 0.8999, -4.0234, -4.3633,  ..., -5.3945, -7.6367, -6.2461],
         ...,
         [-3.3926, -2.1797, -4.5586,  ..., -6.1602, -7.0273, -7.8789],
         [-3.1504, -3.2949, -3.8184,  ..., -5.6250, -7.1875, -7.2695],
         [-1.6650, -4.7070, -4.4102,  ..., -5.5469, -5.3594, -6.2461]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[0.3540, 0.6080, 0.1106, 0.2040],
         [0.2541, 0.5093, 0.0166, 0.0204],
         [0.2692, 0.1609, 0.0455, 0.0218],
         ...,
         [0.0253, 0.4567, 0.0193, 0.0774],
         [0.3814, 0.4889, 0.0092, 0.0351],
         [0.1392, 0.4870, 0.0179, 0.0295]],

        [[0.1778, 0.3435, 0.0178, 0.1076],
         [0.5044, 0.4911, 1.0000, 0.9999],
         [0.1191, 0.4433, 0.0199, 0.0267],
         ...,
         [0.4202, 0.5231, 0.0762, 0.0477],
         [0.3016, 0.6453, 0.1322, 0.2598],
         [0.0341, 0.4101, 0.0683, 0.1033]],

        [[0.5625, 0.6474, 0.0533, 0.0805],
         [0.7103, 0.4974, 0.0070, 0.0219],
         [0.7121, 0.4972, 0.0086, 0.0223],
         ...,
         [0.0235, 0.1476, 0.0213, 0.0536],
         [0.5342, 0.6548, 0.0064, 0.0105],
         [0.7151, 0.9290, 0.4900, 0.1427]],

        [[0.2745, 0.5410, 0.0283, 0.2472],
         [0.2412, 0.5464, 0.0251, 0.2431],
         [0.6599, 0.4836, 0.0119, 0.0853],
         ...,
         [0.6558, 0.4958, 0.0115, 0.0488],
         [0.6107, 0.4833, 0.0146, 0.0453],
         [0.8977, 0.4704, 0.0212, 0.1479]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}], 'enc_aux_outputs': [{'pred_logits': tensor([[[-3.1465, -4.4844,  1.9336,  ..., -5.8008, -8.1328, -8.2812],
         [-2.1367, -3.6582,  0.5215,  ..., -4.2461, -6.4922, -6.4492],
         [-3.0742, -5.4805, -4.0000,  ..., -5.6914, -5.1094, -3.8496],
         ...,
         [-2.7500, -4.7227, -3.2188,  ..., -3.9980, -5.2852, -4.2891],
         [-4.3477, -5.9258, -4.5430,  ..., -5.5625, -6.4609, -6.2852],
         [-3.6738, -5.5391, -3.2148,  ..., -5.1953, -5.6719, -6.3203]],

        [[ 1.3877, -4.1602, -3.4277,  ..., -4.7969, -7.6172, -5.8906],
         [ 1.0283, -4.5742, -4.1641,  ..., -2.3281, -5.3359, -4.0977],
         [-1.5830, -2.9336, -2.3223,  ..., -3.3203, -4.1680, -5.1953],
         ...,
         [-5.2812, -4.8008, -4.9727,  ..., -5.1523, -7.3711, -6.4297],
         [-4.9648, -5.6836, -5.3594,  ..., -6.2266, -7.9805, -6.3242],
         [-4.1836, -3.8633, -4.3984,  ..., -6.7969, -7.7109, -8.2031]],

        [[-2.3887, -4.3711,  1.9277,  ..., -5.0430, -8.3359, -6.4258],
         [-1.7510, -5.1016, -3.0059,  ..., -2.8809, -5.8477, -5.4453],
         [-2.5742, -4.7461, -3.5703,  ..., -3.5254, -5.2305, -6.9102],
         ...,
         [-6.5664, -7.0430, -7.4648,  ..., -7.4414, -9.0078, -6.1289],
         [-4.3555, -4.9531, -3.2695,  ..., -7.3477, -8.0625, -8.7812],
         [-3.2695, -5.7344, -5.7656,  ..., -4.6250, -6.1211, -6.6289]],

        [[ 1.6357, -4.5781, -3.6035,  ..., -3.6641, -5.9414, -4.5977],
         [ 1.5029, -4.4414, -4.2344,  ..., -4.4609, -6.8633, -5.6641],
         [ 1.0986, -3.3496, -2.9277,  ..., -3.8379, -6.8242, -5.2656],
         ...,
         [-2.7305, -2.3281, -5.2109,  ..., -5.5430, -7.2188, -7.7266],
         [-2.3301, -3.0156, -3.0703,  ..., -4.8672, -6.3555, -7.3711],
         [-2.3301, -4.4062, -4.1484,  ..., -5.8984, -6.7148, -6.6836]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<GatherBackward0>), 'pred_boxes': tensor([[[0.3564, 0.6077, 0.1108, 0.2111],
         [0.2539, 0.5108, 0.0174, 0.0228],
         [0.2687, 0.1617, 0.0476, 0.0215],
         ...,
         [0.0219, 0.4691, 0.0200, 0.0845],
         [0.3803, 0.4807, 0.0087, 0.0251],
         [0.1407, 0.4845, 0.0178, 0.0424]],

        [[0.1789, 0.3414, 0.0165, 0.1181],
         [0.5079, 0.4661, 1.0000, 1.0000],
         [0.1190, 0.4430, 0.0229, 0.0282],
         ...,
         [0.4281, 0.5243, 0.0737, 0.0442],
         [0.3313, 0.5583, 0.1258, 0.1172],
         [0.0351, 0.4228, 0.0718, 0.0714]],

        [[0.5628, 0.6478, 0.0617, 0.0910],
         [0.7117, 0.4994, 0.0097, 0.0264],
         [0.7140, 0.4977, 0.0106, 0.0243],
         ...,
         [0.0195, 0.1100, 0.0230, 0.1455],
         [0.5339, 0.6534, 0.0110, 0.0148],
         [0.6706, 0.9244, 0.5478, 0.1265]],

        [[0.2756, 0.5435, 0.0295, 0.2449],
         [0.2416, 0.5377, 0.0278, 0.2295],
         [0.6597, 0.4820, 0.0135, 0.0884],
         ...,
         [0.6579, 0.4924, 0.0136, 0.0584],
         [0.6114, 0.4821, 0.0157, 0.0388],
         [0.8956, 0.4564, 0.0192, 0.1258]]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)}], 'enc_meta': {'class_agnostic': False}, 'dn_aux_outputs': [{'pred_logits': tensor([[[-1.1270, -4.3984,  0.1870,  ..., -5.2266, -5.7070, -7.3477],
         [-7.7578, -9.2344, -9.2188,  ..., -9.2891, -8.3438, -8.5781],
         [-7.7578, -9.2344, -9.2188,  ..., -9.2891, -8.3438, -8.5781],
         ...,
         [-7.8359, -9.2734, -9.4141,  ..., -9.2422, -8.3047, -8.6719],
         [-7.8359, -9.2734, -9.4141,  ..., -9.2422, -8.3047, -8.6719],
         [-7.8359, -9.2734, -9.4141,  ..., -9.2422, -8.3047, -8.6719]],

        [[ 0.2759, -1.2051, -4.7070,  ..., -5.4453, -7.1562, -5.8320],
         [-7.7930, -9.1953, -9.3984,  ..., -9.1953, -8.3594, -8.7500],
         [-7.7930, -9.1953, -9.3984,  ..., -9.1953, -8.3594, -8.7500],
         ...,
         [-7.7930, -9.1953, -9.3984,  ..., -9.1953, -8.3594, -8.7500],
         [-7.7930, -9.1953, -9.3984,  ..., -9.1953, -8.3594, -8.7500],
         [-7.7930, -9.1953, -9.3984,  ..., -9.1953, -8.3594, -8.7500]],

        [[-0.7148, -4.0156,  0.6265,  ..., -4.8555, -6.6289, -6.9141],
         [-2.4648, -4.9453, -4.0625,  ..., -6.5195, -7.3477, -6.2070],
         [-0.5732, -4.3398,  0.1783,  ..., -4.4258, -6.1016, -5.3281],
         ...,
         [-0.4053, -3.4551, -1.1006,  ..., -4.0547, -5.7656, -5.7344],
         [-3.2109, -5.4727, -4.6562,  ..., -7.6797, -6.8555, -6.5195],
         [-5.1211, -6.1914, -4.0234,  ..., -8.5234, -7.1875, -8.4219]],

        [[ 1.8857, -4.6172, -3.4219,  ..., -4.6992, -5.4258, -6.4922],
         [ 0.6421, -3.3945, -4.2383,  ..., -4.6641, -5.9219, -5.6289],
         [ 1.4912, -2.7578, -2.4355,  ..., -3.5254, -3.9551, -5.0273],
         ...,
         [-4.4492, -3.6270, -6.2266,  ..., -7.5898, -7.6172, -7.7734],
         [-6.8555, -6.6523, -8.5625,  ..., -8.7500, -7.4531, -9.0703],
         [-7.6133, -8.4453, -9.0000,  ..., -7.8633, -7.3203, -8.1250]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5423e-01, 6.0754e-01, 1.1777e-01, 2.1246e-01],
         [1.0534e-05, 1.1538e-05, 1.1234e-05, 1.6141e-05],
         [1.0534e-05, 1.1538e-05, 1.1234e-05, 1.6141e-05],
         ...,
         [1.0296e-05, 1.1583e-05, 1.0778e-05, 1.4646e-05],
         [1.0296e-05, 1.1583e-05, 1.0778e-05, 1.4646e-05],
         [1.0296e-05, 1.1583e-05, 1.0778e-05, 1.4646e-05]],

        [[1.7781e-01, 3.4305e-01, 1.9970e-02, 1.1929e-01],
         [9.8687e-06, 1.1802e-05, 1.0601e-05, 1.2595e-05],
         [9.8687e-06, 1.1802e-05, 1.0601e-05, 1.2595e-05],
         ...,
         [9.8695e-06, 1.1803e-05, 1.0611e-05, 1.2596e-05],
         [9.8695e-06, 1.1803e-05, 1.0611e-05, 1.2596e-05],
         [9.8695e-06, 1.1803e-05, 1.0611e-05, 1.2596e-05]],

        [[7.2486e-01, 6.8805e-01, 7.4598e-02, 1.9493e-01],
         [8.5717e-01, 5.8578e-01, 1.4272e-01, 9.6269e-02],
         [5.6241e-01, 6.4874e-01, 5.6158e-02, 8.0368e-02],
         ...,
         [7.2523e-01, 6.8609e-01, 9.5688e-02, 1.9408e-01],
         [6.1628e-01, 5.9234e-01, 3.4153e-02, 5.8136e-02],
         [5.2623e-01, 5.9616e-01, 1.6338e-02, 7.6353e-02]],

        [[2.7453e-01, 5.3653e-01, 2.7651e-02, 2.6176e-01],
         [2.3425e-01, 5.4428e-01, 3.0867e-02, 2.5210e-01],
         [9.5649e-01, 5.1344e-01, 4.0644e-02, 2.0536e-01],
         ...,
         [2.5672e-01, 4.0383e-01, 3.7898e-02, 3.4206e-01],
         [9.5953e-01, 5.2282e-01, 2.2622e-04, 5.6081e-04],
         [9.8632e-06, 1.3529e-05, 1.5972e-05, 1.0186e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-0.2822, -4.5234,  1.5107,  ..., -5.7812, -6.4062, -7.0469],
         [-4.9492, -7.3789, -6.1914,  ..., -5.8320, -8.0781, -6.3359],
         [-4.9492, -7.3789, -6.1914,  ..., -5.8320, -8.0781, -6.3359],
         ...,
         [-4.9297, -7.3672, -6.1680,  ..., -5.8594, -8.1172, -6.3555],
         [-4.9297, -7.3672, -6.1680,  ..., -5.8594, -8.1172, -6.3555],
         [-4.9297, -7.3672, -6.1680,  ..., -5.8594, -8.1172, -6.3555]],

        [[ 1.0996, -1.4639, -4.7422,  ..., -4.8516, -7.2852, -6.0273],
         [-5.3320, -7.4648, -6.2305,  ..., -6.1953, -8.3047, -6.7188],
         [-5.3320, -7.4648, -6.2305,  ..., -6.1953, -8.3047, -6.7188],
         ...,
         [-5.2539, -7.5234, -6.2734,  ..., -6.1914, -8.3125, -6.6836],
         [-5.2539, -7.5234, -6.2734,  ..., -6.1914, -8.3125, -6.6836],
         [-5.2539, -7.5234, -6.2734,  ..., -6.1914, -8.3125, -6.6836]],

        [[-0.6108, -4.6641,  0.4426,  ..., -6.1094, -7.5469, -7.1875],
         [-1.1973, -4.2383, -3.7734,  ..., -4.8320, -6.9258, -4.8086],
         [-1.1719, -5.0391,  1.3613,  ..., -6.3125, -7.3945, -6.5039],
         ...,
         [-2.3340, -4.3750, -3.3770,  ..., -5.6641, -6.7656, -6.1367],
         [-3.0859, -5.0859, -4.8711,  ..., -6.1992, -6.9766, -6.0391],
         [-4.6914, -5.8750, -3.9570,  ..., -7.1875, -6.3555, -6.5664]],

        [[ 1.8613, -2.9102, -3.6719,  ..., -4.9531, -6.1992, -5.0469],
         [ 0.9966, -2.2617, -3.7871,  ..., -5.1172, -5.3594, -5.1406],
         [ 0.8984, -3.6113, -4.2109,  ..., -4.3633, -5.3633, -5.0781],
         ...,
         [-4.3281, -3.6875, -6.0195,  ..., -7.6484, -6.9141, -6.6797],
         [-6.3320, -6.8008, -7.8477,  ..., -8.0625, -7.2344, -8.6484],
         [-6.7031, -7.3672, -6.7148,  ..., -6.8633, -7.7812, -7.0938]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5403e-01, 6.0609e-01, 1.1037e-01, 2.0491e-01],
         [1.0630e-05, 1.1640e-05, 1.0568e-05, 2.1693e-05],
         [1.0630e-05, 1.1640e-05, 1.0568e-05, 2.1693e-05],
         ...,
         [1.0385e-05, 1.1675e-05, 1.0225e-05, 1.9950e-05],
         [1.0385e-05, 1.1675e-05, 1.0225e-05, 1.9950e-05],
         [1.0385e-05, 1.1675e-05, 1.0225e-05, 1.9950e-05]],

        [[1.7731e-01, 3.3967e-01, 1.7744e-02, 1.1231e-01],
         [1.0109e-05, 1.1890e-05, 1.0176e-05, 1.8678e-05],
         [1.0109e-05, 1.1890e-05, 1.0176e-05, 1.8678e-05],
         ...,
         [1.0102e-05, 1.1900e-05, 9.9976e-06, 1.7855e-05],
         [1.0102e-05, 1.1900e-05, 9.9976e-06, 1.7855e-05],
         [1.0102e-05, 1.1900e-05, 9.9976e-06, 1.7855e-05]],

        [[7.2446e-01, 6.8766e-01, 7.0961e-02, 1.9393e-01],
         [8.4803e-01, 5.7849e-01, 1.3542e-01, 9.4147e-02],
         [5.6280e-01, 6.4711e-01, 5.2664e-02, 8.0501e-02],
         ...,
         [7.5601e-01, 6.4647e-01, 1.1410e-01, 1.3200e-01],
         [6.1688e-01, 5.9951e-01, 3.6346e-02, 5.2885e-02],
         [5.2725e-01, 5.9250e-01, 2.1515e-02, 7.4428e-02]],

        [[2.7413e-01, 5.4245e-01, 2.8667e-02, 2.4589e-01],
         [2.3885e-01, 5.4495e-01, 2.7553e-02, 2.4180e-01],
         [9.5692e-01, 5.2512e-01, 2.5352e-02, 1.9940e-01],
         ...,
         [2.5752e-01, 4.1347e-01, 3.2292e-02, 2.9727e-01],
         [9.5939e-01, 5.4079e-01, 1.1807e-03, 2.8349e-02],
         [1.0020e-05, 1.3966e-05, 1.6059e-05, 1.1436e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-2.3047, -5.9961,  2.1367,  ..., -8.6328, -7.9648, -8.8438],
         [-6.0391, -8.0781, -7.0898,  ..., -7.3203, -9.0547, -7.7461],
         [-6.0391, -8.0781, -7.0898,  ..., -7.3203, -9.0547, -7.7461],
         ...,
         [-6.1523, -8.1328, -7.1914,  ..., -7.3555, -9.0703, -7.8984],
         [-6.1523, -8.1328, -7.1914,  ..., -7.3555, -9.0703, -7.8984],
         [-6.1523, -8.1328, -7.1914,  ..., -7.3555, -9.0703, -7.8984]],

        [[ 1.6826, -1.3311, -4.3828,  ..., -4.9023, -7.0078, -6.5117],
         [-6.3516, -8.2422, -7.2422,  ..., -7.4453, -8.9297, -7.9492],
         [-6.3516, -8.2422, -7.2422,  ..., -7.4453, -8.9297, -7.9492],
         ...,
         [-6.1992, -8.1172, -7.0742,  ..., -7.3008, -8.8906, -7.8633],
         [-6.1992, -8.1172, -7.0742,  ..., -7.3008, -8.8906, -7.8633],
         [-6.1992, -8.1172, -7.0742,  ..., -7.3008, -8.8906, -7.8633]],

        [[-1.5518, -4.7656,  1.2324,  ..., -6.4570, -8.2578, -7.3203],
         [-1.1445, -4.2188, -3.8164,  ..., -5.4648, -6.9648, -5.5625],
         [-1.8086, -5.3906,  1.3057,  ..., -6.7773, -8.0625, -6.2695],
         ...,
         [-2.2773, -4.1016, -3.6406,  ..., -5.5195, -6.0898, -5.3711],
         [-2.3555, -4.9766, -4.5352,  ..., -6.3672, -6.7422, -6.1406],
         [-5.1523, -5.1719, -4.3086,  ..., -6.7266, -6.5898, -6.3906]],

        [[ 1.8506, -4.0547, -5.1133,  ..., -6.7422, -6.6602, -5.8906],
         [ 1.3145, -3.4355, -5.2148,  ..., -6.3086, -6.9375, -6.0078],
         [ 1.4502, -3.6172, -4.6367,  ..., -4.7656, -6.2930, -4.8633],
         ...,
         [-4.1562, -4.2266, -5.3711,  ..., -6.9180, -6.3086, -6.4062],
         [-5.4609, -6.2188, -7.4023,  ..., -6.7695, -6.7852, -7.8711],
         [-6.9141, -8.1172, -7.2070,  ..., -6.9297, -8.3594, -7.0391]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5403e-01, 6.0658e-01, 1.1032e-01, 2.0499e-01],
         [1.0840e-05, 1.1648e-05, 1.0998e-05, 1.7278e-05],
         [1.0840e-05, 1.1648e-05, 1.0998e-05, 1.7278e-05],
         ...,
         [1.0610e-05, 1.1680e-05, 1.0600e-05, 1.6143e-05],
         [1.0610e-05, 1.1680e-05, 1.0600e-05, 1.6143e-05],
         [1.0610e-05, 1.1680e-05, 1.0600e-05, 1.6143e-05]],

        [[1.7750e-01, 3.3742e-01, 1.7683e-02, 1.2029e-01],
         [1.0257e-05, 1.1891e-05, 1.0532e-05, 1.5978e-05],
         [1.0257e-05, 1.1891e-05, 1.0532e-05, 1.5978e-05],
         ...,
         [1.0271e-05, 1.1907e-05, 1.0516e-05, 1.5191e-05],
         [1.0271e-05, 1.1907e-05, 1.0516e-05, 1.5191e-05],
         [1.0271e-05, 1.1907e-05, 1.0516e-05, 1.5191e-05]],

        [[7.2406e-01, 6.8823e-01, 7.0468e-02, 1.9322e-01],
         [8.4826e-01, 5.8346e-01, 1.3568e-01, 9.2768e-02],
         [5.6240e-01, 6.4678e-01, 5.2890e-02, 8.0405e-02],
         ...,
         [7.4903e-01, 6.4378e-01, 1.2514e-01, 7.8740e-02],
         [6.1774e-01, 6.0014e-01, 3.4173e-02, 5.1722e-02],
         [5.2754e-01, 5.9119e-01, 2.0207e-02, 7.1790e-02]],

        [[2.7190e-01, 5.4160e-01, 3.5353e-02, 2.4814e-01],
         [2.4064e-01, 5.4631e-01, 2.4588e-02, 2.4333e-01],
         [9.5769e-01, 5.2535e-01, 2.4683e-02, 1.9303e-01],
         ...,
         [2.5724e-01, 4.2085e-01, 4.3662e-02, 3.1900e-01],
         [9.5826e-01, 5.4042e-01, 1.9509e-03, 1.1180e-01],
         [1.0007e-05, 1.3936e-05, 1.8165e-05, 1.1028e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-2.1133, -5.6445,  2.2500,  ..., -7.6680, -7.9688, -8.1875],
         [-6.0742, -6.8320, -7.1328,  ..., -6.6758, -6.4766, -6.5391],
         [-6.0742, -6.8320, -7.1328,  ..., -6.6758, -6.4766, -6.5391],
         ...,
         [-6.0742, -6.8281, -7.1328,  ..., -6.6719, -6.4766, -6.5430],
         [-6.0742, -6.8281, -7.1328,  ..., -6.6719, -6.4766, -6.5430],
         [-6.0742, -6.8281, -7.1328,  ..., -6.6719, -6.4766, -6.5430]],

        [[ 1.5312, -2.2969, -4.0742,  ..., -4.8672, -6.8945, -6.2461],
         [-6.1758, -6.9375, -7.1250,  ..., -6.6992, -6.6250, -6.5625],
         [-6.1758, -6.9375, -7.1250,  ..., -6.6992, -6.6250, -6.5625],
         ...,
         [-6.1914, -6.9570, -7.1484,  ..., -6.7305, -6.6445, -6.6094],
         [-6.1914, -6.9570, -7.1484,  ..., -6.7305, -6.6445, -6.6094],
         [-6.1914, -6.9570, -7.1484,  ..., -6.7305, -6.6445, -6.6094]],

        [[-2.1504, -4.5352,  0.9580,  ..., -5.9258, -7.7461, -7.1172],
         [-0.9912, -3.6250, -3.0566,  ..., -5.0312, -6.7812, -5.0586],
         [-2.7344, -5.1523,  1.4209,  ..., -7.0156, -7.7422, -7.0625],
         ...,
         [-2.3672, -4.1641, -3.8047,  ..., -5.0469, -7.2852, -5.6406],
         [-2.8887, -4.9961, -4.2969,  ..., -5.8711, -6.5312, -6.2031],
         [-5.2148, -5.7031, -5.3320,  ..., -6.6133, -6.9141, -6.7695]],

        [[ 1.6025, -4.3672, -4.4688,  ..., -5.5352, -6.6953, -5.1719],
         [ 1.7529, -3.9961, -4.5625,  ..., -5.2305, -6.8203, -5.2109],
         [ 1.7002, -3.5410, -4.6328,  ..., -5.1719, -7.4141, -5.3984],
         ...,
         [-4.8867, -5.0156, -5.8672,  ..., -6.6211, -7.0859, -6.4922],
         [-5.3594, -5.9727, -6.4297,  ..., -6.5078, -7.1016, -6.1484],
         [-7.0430, -7.1406, -7.3047,  ..., -7.0039, -6.9766, -6.9336]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5367e-01, 6.0715e-01, 1.0990e-01, 2.0666e-01],
         [1.0921e-05, 1.1608e-05, 1.1050e-05, 1.7339e-05],
         [1.0921e-05, 1.1608e-05, 1.1050e-05, 1.7339e-05],
         ...,
         [1.0686e-05, 1.1640e-05, 1.0655e-05, 1.6197e-05],
         [1.0686e-05, 1.1640e-05, 1.0655e-05, 1.6197e-05],
         [1.0686e-05, 1.1640e-05, 1.0655e-05, 1.6197e-05]],

        [[1.7765e-01, 3.3745e-01, 1.7779e-02, 1.1986e-01],
         [1.0312e-05, 1.1852e-05, 1.0583e-05, 1.6095e-05],
         [1.0312e-05, 1.1852e-05, 1.0583e-05, 1.6095e-05],
         ...,
         [1.0332e-05, 1.1870e-05, 1.0580e-05, 1.5305e-05],
         [1.0332e-05, 1.1870e-05, 1.0580e-05, 1.5305e-05],
         [1.0332e-05, 1.1870e-05, 1.0580e-05, 1.5305e-05]],

        [[7.2421e-01, 6.8924e-01, 7.0344e-02, 1.9499e-01],
         [8.4735e-01, 5.8383e-01, 1.3080e-01, 9.3319e-02],
         [5.6273e-01, 6.4729e-01, 5.2677e-02, 8.0838e-02],
         ...,
         [7.4236e-01, 6.4508e-01, 1.1629e-01, 9.9438e-02],
         [6.1843e-01, 6.0067e-01, 3.3376e-02, 5.2610e-02],
         [5.2818e-01, 5.9426e-01, 2.1901e-02, 7.1565e-02]],

        [[2.7264e-01, 5.4105e-01, 3.2689e-02, 2.4816e-01],
         [2.4093e-01, 5.4654e-01, 2.4424e-02, 2.4354e-01],
         [9.5793e-01, 5.2580e-01, 2.5350e-02, 1.9527e-01],
         ...,
         [2.5374e-01, 4.3066e-01, 4.1387e-02, 3.4829e-01],
         [9.5852e-01, 5.4112e-01, 6.3498e-03, 7.9337e-02],
         [9.9172e-06, 1.3729e-05, 2.0151e-05, 1.2969e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-2.5234, -5.0586,  2.4785,  ..., -6.9297, -7.2109, -6.3359],
         [-6.5898, -7.9141, -7.6211,  ..., -7.1641, -6.8711, -6.7266],
         [-6.5898, -7.9141, -7.6211,  ..., -7.1641, -6.8711, -6.7266],
         ...,
         [-6.5898, -7.9102, -7.6172,  ..., -7.1641, -6.8711, -6.7266],
         [-6.5898, -7.9102, -7.6172,  ..., -7.1641, -6.8711, -6.7266],
         [-6.5898, -7.9102, -7.6172,  ..., -7.1641, -6.8711, -6.7266]],

        [[ 1.4004, -2.6895, -4.4570,  ..., -4.4297, -6.6602, -5.3125],
         [-6.5117, -8.0078, -7.6328,  ..., -7.1992, -6.8945, -6.7930],
         [-6.5117, -8.0078, -7.6328,  ..., -7.1992, -6.8945, -6.7930],
         ...,
         [-6.5156, -8.0078, -7.6328,  ..., -7.2031, -6.8945, -6.8008],
         [-6.5156, -8.0078, -7.6328,  ..., -7.2031, -6.8945, -6.8008],
         [-6.5156, -8.0078, -7.6328,  ..., -7.2031, -6.8945, -6.8008]],

        [[-2.4355, -4.3789,  1.1309,  ..., -5.7695, -7.4922, -6.1211],
         [-1.5439, -3.9531, -2.6348,  ..., -5.2031, -7.4219, -4.9492],
         [-2.5254, -4.5156,  1.6592,  ..., -6.4922, -7.3086, -5.5469],
         ...,
         [-2.6172, -4.5234, -3.6562,  ..., -5.4766, -6.9883, -5.4570],
         [-3.1211, -4.7617, -4.2617,  ..., -6.3633, -6.9883, -6.3086],
         [-5.1094, -5.7344, -4.9922,  ..., -6.6719, -6.7070, -6.6328]],

        [[ 1.8818, -4.7930, -4.9727,  ..., -5.2461, -6.6836, -5.2734],
         [ 1.6602, -4.4336, -4.6914,  ..., -4.1641, -6.3750, -4.6367],
         [ 1.8291, -3.8594, -4.5508,  ..., -4.7500, -7.0469, -5.1562],
         ...,
         [-4.6758, -5.1953, -5.7812,  ..., -6.0586, -6.5898, -6.2695],
         [-5.7383, -5.9453, -6.2969,  ..., -6.5898, -6.5586, -6.2109],
         [-6.7344, -6.9883, -6.9219,  ..., -6.7734, -7.2461, -6.4727]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5372e-01, 6.0713e-01, 1.1008e-01, 2.0503e-01],
         [1.0972e-05, 1.1619e-05, 1.1070e-05, 1.7493e-05],
         [1.0972e-05, 1.1619e-05, 1.1070e-05, 1.7493e-05],
         ...,
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05],
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05],
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05]],

        [[1.7766e-01, 3.3930e-01, 1.7808e-02, 1.1494e-01],
         [1.0360e-05, 1.1862e-05, 1.0600e-05, 1.6143e-05],
         [1.0360e-05, 1.1862e-05, 1.0600e-05, 1.6143e-05],
         ...,
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05],
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05],
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05]],

        [[7.2438e-01, 6.8911e-01, 7.0607e-02, 1.9470e-01],
         [8.4515e-01, 5.8335e-01, 1.2938e-01, 9.2530e-02],
         [5.6284e-01, 6.4728e-01, 5.2895e-02, 8.0700e-02],
         ...,
         [7.4189e-01, 6.4254e-01, 1.1304e-01, 9.7355e-02],
         [6.1874e-01, 6.0003e-01, 3.2799e-02, 5.1812e-02],
         [5.2861e-01, 5.9504e-01, 2.1186e-02, 6.4504e-02]],

        [[2.7264e-01, 5.4093e-01, 3.2691e-02, 2.4873e-01],
         [2.4122e-01, 5.4580e-01, 2.4885e-02, 2.4169e-01],
         [9.5793e-01, 5.2565e-01, 2.5319e-02, 1.9502e-01],
         ...,
         [2.5208e-01, 4.4211e-01, 4.1309e-02, 3.1743e-01],
         [9.5877e-01, 5.3051e-01, 7.1190e-03, 8.1017e-02],
         [1.0012e-05, 1.3735e-05, 2.0321e-05, 1.3131e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}, {'pred_logits': tensor([[[-2.8086, -5.1367,  2.5723,  ..., -5.7109, -6.0156, -5.5781],
         [-5.7422, -8.1406, -7.4414,  ..., -6.8320, -6.9883, -7.2930],
         [-5.7422, -8.1406, -7.4414,  ..., -6.8320, -6.9883, -7.2930],
         ...,
         [-5.7539, -8.1094, -7.4492,  ..., -6.8242, -7.0117, -7.2930],
         [-5.7539, -8.1094, -7.4492,  ..., -6.8242, -7.0117, -7.2930],
         [-5.7539, -8.1094, -7.4492,  ..., -6.8242, -7.0117, -7.2930]],

        [[ 1.6338, -3.7344, -5.0625,  ..., -4.4258, -6.1953, -5.6836],
         [-6.0195, -8.3047, -7.5469,  ..., -6.9961, -7.0938, -7.4258],
         [-6.0195, -8.3047, -7.5469,  ..., -6.9961, -7.0938, -7.4258],
         ...,
         [-6.0039, -8.3047, -7.5273,  ..., -6.9922, -7.1523, -7.4219],
         [-6.0039, -8.3047, -7.5273,  ..., -6.9922, -7.1523, -7.4219],
         [-6.0039, -8.3047, -7.5273,  ..., -6.9922, -7.1523, -7.4219]],

        [[-2.8887, -4.3008,  1.4941,  ..., -5.0352, -6.1836, -5.4023],
         [-1.7100, -4.0312, -2.6855,  ..., -4.8789, -6.3828, -4.7227],
         [-3.0234, -4.8242,  1.8506,  ..., -5.8828, -6.2461, -5.5547],
         ...,
         [-2.8008, -4.4609, -3.4824,  ..., -5.5469, -6.9102, -5.8125],
         [-3.3418, -5.1172, -4.0938,  ..., -6.4844, -6.9414, -6.3320],
         [-5.4062, -6.2578, -5.2227,  ..., -6.8555, -6.7930, -6.6797]],

        [[ 1.9355, -4.8906, -5.5469,  ..., -5.2148, -6.4492, -5.8516],
         [ 1.7676, -4.7188, -5.1562,  ..., -4.4336, -6.0977, -5.5977],
         [ 1.8369, -4.0625, -4.9492,  ..., -4.4727, -5.9961, -5.3945],
         ...,
         [-4.7539, -6.0000, -5.7969,  ..., -6.2227, -6.9414, -6.5625],
         [-5.8555, -6.0039, -6.7734,  ..., -6.3750, -6.4375, -6.5703],
         [-7.2617, -7.4414, -8.1094,  ..., -6.7383, -7.3242, -6.9180]]],
       device='cuda:0', dtype=torch.float16, grad_fn=<UnbindBackward0>), 'pred_boxes': tensor([[[3.5372e-01, 6.0713e-01, 1.1008e-01, 2.0503e-01],
         [1.0972e-05, 1.1619e-05, 1.1070e-05, 1.7493e-05],
         [1.0972e-05, 1.1619e-05, 1.1070e-05, 1.7493e-05],
         ...,
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05],
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05],
         [1.0735e-05, 1.1652e-05, 1.0675e-05, 1.6342e-05]],

        [[1.7766e-01, 3.3930e-01, 1.7808e-02, 1.1494e-01],
         [1.0360e-05, 1.1862e-05, 1.0600e-05, 1.6143e-05],
         [1.0360e-05, 1.1862e-05, 1.0600e-05, 1.6143e-05],
         ...,
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05],
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05],
         [1.0380e-05, 1.1880e-05, 1.0603e-05, 1.5352e-05]],

        [[7.2438e-01, 6.8911e-01, 7.0608e-02, 1.9470e-01],
         [8.4516e-01, 5.8335e-01, 1.2938e-01, 9.2530e-02],
         [5.6284e-01, 6.4728e-01, 5.2896e-02, 8.0701e-02],
         ...,
         [7.4189e-01, 6.4254e-01, 1.1304e-01, 9.7356e-02],
         [6.1874e-01, 6.0003e-01, 3.2799e-02, 5.1813e-02],
         [5.2861e-01, 5.9504e-01, 2.1186e-02, 6.4504e-02]],

        [[2.7264e-01, 5.4093e-01, 3.2691e-02, 2.4873e-01],
         [2.4122e-01, 5.4580e-01, 2.4885e-02, 2.4169e-01],
         [9.5793e-01, 5.2565e-01, 2.5319e-02, 1.9502e-01],
         ...,
         [2.5208e-01, 4.4211e-01, 4.1309e-02, 3.1744e-01],
         [9.5877e-01, 5.3051e-01, 7.1191e-03, 8.1017e-02],
         [1.0012e-05, 1.3735e-05, 2.0321e-05, 1.3131e-05]]], device='cuda:0',
       grad_fn=<UnbindBackward0>)}], 'dn_meta': {'dn_positive_idx': (tensor([  0,   8,  16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192],
       device='cuda:0'), tensor([  0,   8,  16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  96, 104,
        112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192],
       device='cuda:0'), tensor([  0,   1,   2,   3,   8,   9,  10,  11,  16,  17,  18,  19,  24,  25,
         26,  27,  32,  33,  34,  35,  40,  41,  42,  43,  48,  49,  50,  51,
         56,  57,  58,  59,  64,  65,  66,  67,  72,  73,  74,  75,  80,  81,
         82,  83,  88,  89,  90,  91,  96,  97,  98,  99, 104, 105, 106, 107,
        112, 113, 114, 115, 120, 121, 122, 123, 128, 129, 130, 131, 136, 137,
        138, 139, 144, 145, 146, 147, 152, 153, 154, 155, 160, 161, 162, 163,
        168, 169, 170, 171, 176, 177, 178, 179, 184, 185, 186, 187, 192, 193,
        194, 195], device='cuda:0'), tensor([  0,   1,   2,   8,   9,  10,  16,  17,  18,  24,  25,  26,  32,  33,
         34,  40,  41,  42,  48,  49,  50,  56,  57,  58,  64,  65,  66,  72,
         73,  74,  80,  81,  82,  88,  89,  90,  96,  97,  98, 104, 105, 106,
        112, 113, 114, 120, 121, 122, 128, 129, 130, 136, 137, 138, 144, 145,
        146, 152, 153, 154, 160, 161, 162, 168, 169, 170, 176, 177, 178, 184,
        185, 186, 192, 193, 194], device='cuda:0')), 'dn_num_group': 25, 'dn_num_split': [200, 300]}}
